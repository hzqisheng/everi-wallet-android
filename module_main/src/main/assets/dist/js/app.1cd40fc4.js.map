{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/utils/excodes.js","webpack:///./src/utils/bridge.js","webpack:///./src/utils/evtAPI.js","webpack:///./src/utils/bip39API.js","webpack:///./src/main.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","app","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","excodes","code","en","cn","browser","versions","u","navigator","userAgent","trident","indexOf","presto","webKit","gecko","mobile","match","ios","android","iPhone","iPad","webApp","weixin","toLowerCase","qq","toJson","body","JSON","parse","errorHandel","obj","forEach","item","errorHandle","error","isServerError","message","serverError","bridge","handle","stringify","console","log","webkit","messageHandlers","Error","postMessage","test","randomPrivateKey","async","lib_default","a","EvtKey","privateToPublic","privateKey","seedPrivateKey","seed","isValidPrivateKey","isValidPublicKey","isValidAddress","address","random32BytesAsHex","randomName128","getNullAddress","apiCaller","needPrivateKeyResponse","network","host","port","protocol","changeNetwork","EVTInit","endpoint","keyProvider","Promise","res","rej","getInfo","getHeadBlockHeaderState","getTransactionIdsInBlock","blockId","getOwnedTokens","publicKeys","getTokens","domain","skip","take","getManagedGroups","getCreatedDomains","getCreatedFungibles","getActions","params","getToken","id","getFungibleBalance","symbolId","Number","getTransactionDetailById","getDomainDetail","getGroupDetail","getFungibleActionsByAddress","getTransactionsDetailOfPublicKeys","publickeys","getFungibleSymbolDetail","sym_id","getRequiredKeysForSuspendedTransaction","proposalName","availableKeys","getStatusOfEvtLink","options","getSuspendedTransactionDetail","getEstimatedChargeForTransaction","newdomain","json","config","EvtAction","generateUnsignedTransaction","pushTransaction","split","Array","isArray","index","getUniqueLinkId","EvtLink","intervalId","getEVTLinkQrImage","qrType","qrParams","imgParams","err","stopEVTLinkQrImageReload","clearInterval","parseEvtLink","text","getEvtLinkForEveriPass","getEvtLinkForEveriPay","getEvtLinkForPayeeCode","generateMnemonic","bip39_default","words","mnemonicToSeedHex","mnemonicToSeed","password","validateMnemonic","mnemonic","entropyToMnemonic","str","mnemonicToEntropy","createEVTWallet","entropy","substring","mnemoinc","publicKey","type","importEVTWallet","getEVTFungiblesList","arr","ids","detail","all","then","catch","getEVTDomainsList","getEVTFungibleBalanceList","asset"],"mappings":"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","file":"js/app.1cd40fc4.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","/**\n * Created by Administrator on 2019/1/15.\n */\n\nexport default [\n  {\n    \"name\": \"network_error\",\n    \"code\": \"0\",\n    \"en\": \"network error\"\n  },\n  {\n    \"name\": \"database_exception\",\n    \"code\": \"3010000\",\n    \"en\": \"Database exception\"\n  },\n  {\n    \"name\": \"block_validate_exception\",\n    \"code\": \"3020000\",\n    \"en\": \"block validation exception\"\n  },\n  {\n    \"name\": \"unlinkable_block_exception\",\n    \"code\": \"3020001\",\n    \"en\": \"Unlinkable block\"\n  },\n  {\n    \"name\": \"block_tx_output_exception\",\n    \"code\": \"3020002\",\n    \"en\": \"Transaction outputs in block do not match transaction outputs from applying block\"\n  },\n  {\n    \"name\": \"block_concurrency_exception\",\n    \"code\": \"3020003\",\n    \"en\": \"Block does not guarantee concurrent execution without conflicts\"\n  },\n  {\n    \"name\": \"block_lock_exception\",\n    \"code\": \"3020004\",\n    \"en\": \"Shard locks in block are incorrect or mal-formed\"\n  },\n  {\n    \"name\": \"block_resource_exhausted\",\n    \"code\": \"3020005\",\n    \"en\": \"Block exhausted allowed resources\"\n  },\n  {\n    \"name\": \"block_too_old_exception\",\n    \"code\": \"3020006\",\n    \"en\": \"Block is too old to push\"\n  },\n  {\n    \"name\": \"block_from_the_future\",\n    \"code\": \"3020007\",\n    \"en\": \"Block is from the future\"\n  },\n  {\n    \"name\": \"wrong_signing_key\",\n    \"code\": \"3020008\",\n    \"en\": \"Block is not signed with expected key\"\n  },\n  {\n    \"name\": \"wrong_producer\",\n    \"code\": \"3020009\",\n    \"en\": \"Block is not signed by expected producer\"\n  },\n  {\n    \"name\": \"transaction_exception\",\n    \"code\": \"3030000\",\n    \"en\": \"transaction validation exception\"\n  },\n  {\n    \"name\": \"tx_duplicate\",\n    \"code\": \"3030001\",\n    \"en\": \"duplicate transaction\"\n  },\n  {\n    \"name\": \"tx_decompression_error\",\n    \"code\": \"3030002\",\n    \"en\": \"Error decompressing transaction\"\n  },\n  {\n    \"name\": \"expired_tx_exception\",\n    \"code\": \"3030003\",\n    \"en\": \"Expired Transaction\"\n  },\n  {\n    \"name\": \"tx_exp_too_far_exception\",\n    \"code\": \"3030004\",\n    \"en\": \"Transaction Expiration Too Far\"\n  },\n  {\n    \"name\": \"invalid_ref_block_exception\",\n    \"code\": \"3030005\",\n    \"en\": \"Invalid Reference Block\"\n  },\n  {\n    \"name\": \"tx_apply_exception\",\n    \"code\": \"3030006\",\n    \"en\": \"Transaction Apply Exception\"\n  },\n  {\n    \"name\": \"tx_receipt_inconsistent_status\",\n    \"code\": \"3030007\",\n    \"en\": \"Transaction receipt applied status does not match received status.\"\n  },\n  {\n    \"name\": \"tx_no_action\",\n    \"code\": \"3030008\",\n    \"en\": \"transaction should have at least one normal action.\",\n    \"cn\": \"每笔交易至少需要有一个操作。\"\n  },\n  {\n    \"name\": \"deadline_exception\",\n    \"code\": \"3030009\",\n    \"en\": \"transaction is timeout.\"\n  },\n  {\n    \"name\": \"max_charge_exceeded_exception\",\n    \"code\": \"3030010\",\n    \"en\": \"exceeded max charge paid\",\n    \"cn\": \"交易所需要的手续费超出了最大手续费设定。\"\n  },\n  {\n    \"name\": \"charge_exceeded_exception\",\n    \"code\": \"3030011\",\n    \"en\": \"exceeded remaining EVT & Pinned EVT tokens\",\n    \"cn\": \"交易所需要的手续费超出了指定付款人的余额。\"\n  },\n  {\n    \"name\": \"payer_exception\",\n    \"code\": \"3030012\",\n    \"en\": \"Invalid payer\",\n    \"cn\": \"指定的付款者不合法。\"\n  },\n  {\n    \"name\": \"too_many_tx_at_once\",\n    \"code\": \"3030013\",\n    \"en\": \"Pushing too many transactions at once\"\n  },\n  {\n    \"name\": \"tx_too_big\",\n    \"code\": \"3030014\",\n    \"en\": \"Transaction is too big\",\n    \"cn\": \"交易的内容太大。\"\n  },\n  {\n    \"name\": \"unknown_transaction_compression\",\n    \"code\": \"3030015\",\n    \"en\": \"Unknown transaction compression\"\n  },\n  {\n    \"name\": \"action_exception\",\n    \"code\": \"3040000\",\n    \"en\": \"action exception\"\n  },\n  {\n    \"name\": \"action_authorize_exception\",\n    \"code\": \"3040001\",\n    \"en\": \"invalid action authorization\",\n    \"cn\": \"操作的授权不合法。\"\n  },\n  {\n    \"name\": \"action_args_exception\",\n    \"code\": \"3040002\",\n    \"en\": \"Invalid arguments for action\",\n    \"cn\": \"操作的参数不合法。\"\n  },\n  {\n    \"name\": \"name_reserved_exception\",\n    \"code\": \"3040003\",\n    \"en\": \"Name is reserved.\",\n    \"cn\": \"这个名称不能在这里使用。\"\n  },\n  {\n    \"name\": \"address_reserved_exception\",\n    \"code\": \"3040004\",\n    \"en\": \"Address is reserved.\"\n  },\n  {\n    \"name\": \"domain_exception\",\n    \"code\": \"3040100\",\n    \"en\": \"Domain exception\"\n  },\n  {\n    \"name\": \"unknown_domain_exception\",\n    \"code\": \"3040101\",\n    \"en\": \"Domain does not exist.\",\n    \"cn\": \"该域并不存在。\"\n  },\n  {\n    \"name\": \"domain_duplicate_exception\",\n    \"code\": \"3040102\",\n    \"en\": \"Domain already exists.\",\n    \"cn\": \"同名的域已经存在。\"\n  },\n  {\n    \"name\": \"domain_name_exception\",\n    \"code\": \"3040103\",\n    \"en\": \"Invalid domain name\",\n    \"cn\": \"域名不合规。\"\n  },\n  {\n    \"name\": \"token_exception\",\n    \"code\": \"3040200\",\n    \"en\": \"Token exception\"\n  },\n  {\n    \"name\": \"unknown_token_exception\",\n    \"code\": \"3040201\",\n    \"en\": \"Token does not exist.\",\n    \"cn\": \"该通证并不存在。\"\n  },\n  {\n    \"name\": \"token_duplicate_exception\",\n    \"code\": \"3040202\",\n    \"en\": \"Token already exists.\",\n    \"cn\": \"同名的通证已经存在。\"\n  },\n  {\n    \"name\": \"token_name_exception\",\n    \"code\": \"3040203\",\n    \"en\": \"Invalid token name\",\n    \"cn\": \"通证名字不合规。\"\n  },\n  {\n    \"name\": \"token_owner_exception\",\n    \"code\": \"3040204\",\n    \"en\": \"Token owner cannot be empty.\",\n    \"cn\": \"通证的所有者不能为空。\"\n  },\n  {\n    \"name\": \"token_destroyed_exception\",\n    \"code\": \"3040205\",\n    \"en\": \"Token is destroyed.\",\n    \"cn\": \"该通证已经被销毁，不能使用。\"\n  },\n  {\n    \"name\": \"token_locked_exception\",\n    \"code\": \"3040206\",\n    \"en\": \"Locked token cannot be transfered.\",\n    \"cn\": \"该通证已经被锁定，不能被转移。\"\n  },\n  {\n    \"name\": \"token_cannot_destroy_exception\",\n    \"code\": \"3040207\",\n    \"en\": \"Token in this domain cannot be destroyed.\",\n    \"cn\": \"该域的通证不能被销毁。\"\n  },\n  {\n    \"name\": \"group_exception\",\n    \"code\": \"3040300\",\n    \"en\": \"Group exception\"\n  },\n  {\n    \"name\": \"unknown_group_exception\",\n    \"code\": \"3040301\",\n    \"en\": \"Group does not exist.\",\n    \"cn\": \"该组并不存在。\"\n  },\n  {\n    \"name\": \"group_duplicate_exception\",\n    \"code\": \"3040302\",\n    \"en\": \"Group already exists.\",\n    \"cn\": \"同名的组已经存在。\"\n  },\n  {\n    \"name\": \"group_name_exception\",\n    \"code\": \"3040303\",\n    \"en\": \"Invalid group name\",\n    \"cn\": \"组的名字不合规。\"\n  },\n  {\n    \"name\": \"group_key_exception\",\n    \"code\": \"3040304\",\n    \"en\": \"Group key is reserved to update this group.\",\n    \"cn\": \"控制该组的公钥不合规，只能使用普通公钥。\"\n  },\n  {\n    \"name\": \"fungible_exception\",\n    \"code\": \"3040400\",\n    \"en\": \"Fungible exception\"\n  },\n  {\n    \"name\": \"unknown_fungible_exception\",\n    \"code\": \"3040401\",\n    \"en\": \"Fungible asset does not exist.\",\n    \"cn\": \"该代币并不存在。\"\n  },\n  {\n    \"name\": \"fungible_duplicate_exception\",\n    \"code\": \"3040402\",\n    \"en\": \"Fungible asset already exists.\",\n    \"cn\": \"同资产编号的代币已经存在。\"\n  },\n  {\n    \"name\": \"fungible_name_exception\",\n    \"code\": \"3040403\",\n    \"en\": \"Invalid fungible asset name\",\n    \"cn\": \"代币的名称并不合规。\"\n  },\n  {\n    \"name\": \"fungible_symbol_exception\",\n    \"code\": \"3040404\",\n    \"en\": \"Invalid fungible asset symbol\",\n    \"cn\": \"代币的资产简称并不合规。\"\n  },\n  {\n    \"name\": \"fungible_supply_exception\",\n    \"code\": \"3040405\",\n    \"en\": \"Invalid fungible supply\",\n    \"cn\": \"代币的供应总量不合规。\"\n  },\n  {\n    \"name\": \"fungible_address_exception\",\n    \"code\": \"3040406\",\n    \"en\": \"Invalid address\",\n    \"cn\": \"代币地址不合规。\"\n  },\n  {\n    \"name\": \"math_overflow_exception\",\n    \"code\": \"3040407\",\n    \"en\": \"Operations resulted in overflow.\",\n    \"cn\": \"操作过程中出现了溢出的问题。\"\n  },\n  {\n    \"name\": \"balance_exception\",\n    \"code\": \"3040408\",\n    \"en\": \"Not enough balance left.\",\n    \"cn\": \"可用余额不足。\"\n  },\n  {\n    \"name\": \"suspend_exception\",\n    \"code\": \"3040500\",\n    \"en\": \"Suspend exception\"\n  },\n  {\n    \"name\": \"unknown_suspend_exception\",\n    \"code\": \"3040501\",\n    \"en\": \"Suspend transaction does not exist.\",\n    \"cn\": \"该挂起交易并不存在。\"\n  },\n  {\n    \"name\": \"suspend_duplicate_exception\",\n    \"code\": \"3040502\",\n    \"en\": \"Suspend transaction already exists.\",\n    \"cn\": \"同名的挂起交易已经存在。\"\n  },\n  {\n    \"name\": \"suspend_status_exception\",\n    \"code\": \"3040503\",\n    \"en\": \"Suspend transaction is not in proper status.\",\n    \"cn\": \"该挂起交易的状态不支持执行此操作。\"\n  },\n  {\n    \"name\": \"suspend_proposer_key_exception\",\n    \"code\": \"3040504\",\n    \"en\": \"Proposer needs to sign his key.\",\n    \"cn\": \"挂起交易的提出者需要对其签名。\"\n  },\n  {\n    \"name\": \"suspend_duplicate_key_exception\",\n    \"code\": \"3040505\",\n    \"en\": \"Same keys are already signed this suspend transaction.\",\n    \"cn\": \"已经有同样的公钥签名了此挂起交易。\"\n  },\n  {\n    \"name\": \"suspend_expired_tx_exception\",\n    \"code\": \"3040506\",\n    \"en\": \"Suspend transaction is expired.\",\n    \"cn\": \"该挂起交易已经过期，不能被执行。\"\n  },\n  {\n    \"name\": \"suspend_not_required_keys_exception\",\n    \"code\": \"3040507\",\n    \"en\": \"Provided keys are not required.\",\n    \"cn\": \"签名的公钥并没有被此挂起交易需要。\"\n  },\n  {\n    \"name\": \"suspend_executor_exception\",\n    \"code\": \"3040508\",\n    \"en\": \"Invalid executor.\",\n    \"cn\": \"该执行者并不合法。\"\n  },\n  {\n    \"name\": \"suspend_invalid_action_exception\",\n    \"code\": \"3040509\",\n    \"en\": \"Action is not valid for suspend transaction.\",\n    \"cn\": \"此操作并不可以用于挂起交易。\"\n  },\n  {\n    \"name\": \"proposal_name_exception\",\n    \"code\": \"3040510\",\n    \"en\": \"Invalid proposal name\",\n    \"cn\": \"提案名称不合法。\"\n  },\n  {\n    \"name\": \"meta_exception\",\n    \"code\": \"3040600\",\n    \"en\": \"Meta exception\"\n  },\n  {\n    \"name\": \"meta_key_exception\",\n    \"code\": \"3040601\",\n    \"en\": \"Invalid meta key\",\n    \"cn\": \"元数据的Key不合法。\"\n  },\n  {\n    \"name\": \"meta_value_exception\",\n    \"code\": \"3040602\",\n    \"en\": \"Invalid meta value\",\n    \"cn\": \"元数据的值不合法。\"\n  },\n  {\n    \"name\": \"meta_involve_exception\",\n    \"code\": \"3040603\",\n    \"en\": \"Creator is not involved.\",\n    \"cn\": \"元数据的写入者不合法。\"\n  },\n  {\n    \"name\": \"evt_link_exception\",\n    \"code\": \"3040700\",\n    \"en\": \"EVT-Link exception\"\n  },\n  {\n    \"name\": \"evt_link_no_key_exception\",\n    \"code\": \"3040701\",\n    \"en\": \"Specific segment key is not in this evt-link.\",\n    \"cn\": \"EvtLink的结构不完整。\"\n  },\n  {\n    \"name\": \"evt_link_version_exception\",\n    \"code\": \"3040702\",\n    \"en\": \"EVT-Link version is not valid.\",\n    \"cn\": \"EvtLink版本号较低，不能被执行。\"\n  },\n  {\n    \"name\": \"evt_link_id_exception\",\n    \"code\": \"3040703\",\n    \"en\": \"EVT-Link id is not valid.\",\n    \"cn\": \"EvtLink中的Link ID不合法。\"\n  },\n  {\n    \"name\": \"evt_link_dupe_exception\",\n    \"code\": \"3040704\",\n    \"en\": \"Duplicate EVT-Link.\",\n    \"cn\": \"EvtLink已经被执行。\"\n  },\n  {\n    \"name\": \"evt_link_type_exception\",\n    \"code\": \"3040705\",\n    \"en\": \"Invalid EVT-Link type.\",\n    \"cn\": \"EvtLink类型错误。\"\n  },\n  {\n    \"name\": \"evt_link_expiration_exception\",\n    \"code\": \"3040706\",\n    \"en\": \"EVT-Link is expired.\",\n    \"cn\": \"EvtLink已经过期。\"\n  },\n  {\n    \"name\": \"evt_link_existed_exception\",\n    \"code\": \"3040707\",\n    \"en\": \"EVT-Link is not existed.\",\n    \"cn\": \"EvtLink不存在。\"\n  },\n  {\n    \"name\": \"everipass_exception\",\n    \"code\": \"3040708\",\n    \"en\": \"everiPass failed.\",\n    \"cn\": \"everiPass失败。\"\n  },\n  {\n    \"name\": \"everipay_exception\",\n    \"code\": \"3040709\",\n    \"en\": \"everiPay failed.\",\n    \"cn\": \"everiPay失败。\"\n  },\n  {\n    \"name\": \"prodvote_exception\",\n    \"code\": \"3040800\",\n    \"en\": \"Producer vote exception\"\n  },\n  {\n    \"name\": \"prodvote_key_exception\",\n    \"code\": \"3040801\",\n    \"en\": \"Unknown prodvote conf key.\"\n  },\n  {\n    \"name\": \"prodvote_value_exception\",\n    \"code\": \"3040802\",\n    \"en\": \"Invalid prodvote conf value.\"\n  },\n  {\n    \"name\": \"prodvote_producer_exception\",\n    \"code\": \"3040803\",\n    \"en\": \"Invalid producer.\"\n  },\n  {\n    \"name\": \"lock_exception\",\n    \"code\": \"3040900\",\n    \"en\": \"Lock assets exception\"\n  },\n  {\n    \"name\": \"unknown_lock_exception\",\n    \"code\": \"3040901\",\n    \"en\": \"Unknown lock assets proposal\",\n    \"cn\": \"该锁定资产提案不存在。\"\n  },\n  {\n    \"name\": \"lock_duplicate_exception\",\n    \"code\": \"3040902\",\n    \"en\": \"Lock assets proposal already exists.\",\n    \"cn\": \"同名的锁定资产提案已经存在。\"\n  },\n  {\n    \"name\": \"lock_unlock_time_exception\",\n    \"code\": \"3040903\",\n    \"en\": \"Invalid unlock time.\",\n    \"cn\": \"解锁时间不合法。\"\n  },\n  {\n    \"name\": \"lock_deadline_exception\",\n    \"code\": \"3040904\",\n    \"en\": \"Invalid deadline.\",\n    \"cn\": \"解锁的截止时间不合法。\"\n  },\n  {\n    \"name\": \"lock_assets_exception\",\n    \"code\": \"3040905\",\n    \"en\": \"Invalid lock assets.\",\n    \"cn\": \"将要锁定的资产不合法。\"\n  },\n  {\n    \"name\": \"lock_address_exception\",\n    \"code\": \"3040906\",\n    \"en\": \"Invalid lock address.\",\n    \"cn\": \"将要锁定资产的地址不合法。\"\n  },\n  {\n    \"name\": \"lock_condition_exception\",\n    \"code\": \"3040907\",\n    \"en\": \"Invalid lock condition.\",\n    \"cn\": \"锁定资产的条件不合法。\"\n  },\n  {\n    \"name\": \"lock_expired_exception\",\n    \"code\": \"3040908\",\n    \"en\": \"Lock assets proposal is expired.\",\n    \"cn\": \"该锁定资产的提案已经过期。\"\n  },\n  {\n    \"name\": \"lock_aprv_data_exception\",\n    \"code\": \"3040909\",\n    \"en\": \"Approve data is not valid.\",\n    \"cn\": \"授权锁定资产的数据不合法。\"\n  },\n  {\n    \"name\": \"lock_duplicate_key_exception\",\n    \"code\": \"3040910\",\n    \"en\": \"Some keys are already signed this lock assets proposal.\",\n    \"cn\": \"同样的公钥已经授权过该锁定资产提案。\"\n  },\n  {\n    \"name\": \"lock_not_reach_unlock_time\",\n    \"code\": \"3040911\",\n    \"en\": \"Unlock time is not reach.\",\n    \"cn\": \"还没有到达解锁时间，不能解锁资产。\"\n  },\n  {\n    \"name\": \"lock_not_reach_deadline\",\n    \"code\": \"3040912\",\n    \"en\": \"Deadline is not reach.\",\n    \"cn\": \"解锁条件未满足，同时还没有到达解锁时间，该资产依然被锁定。\"\n  },\n  {\n    \"name\": \"producer_exception\",\n    \"code\": \"3050000\",\n    \"en\": \"Producer exception\"\n  },\n  {\n    \"name\": \"producer_priv_key_not_found\",\n    \"code\": \"3050001\",\n    \"en\": \"Producer private key is not available\"\n  },\n  {\n    \"name\": \"missing_pending_block_state\",\n    \"code\": \"3050002\",\n    \"en\": \"Pending block state is missing\"\n  },\n  {\n    \"name\": \"producer_double_confirm\",\n    \"code\": \"3050003\",\n    \"en\": \"Producer is double confirming known range\"\n  },\n  {\n    \"name\": \"producer_schedule_exception\",\n    \"code\": \"3050004\",\n    \"en\": \"Producer schedule exception\"\n  },\n  {\n    \"name\": \"producer_not_in_schedule\",\n    \"code\": \"3050005\",\n    \"en\": \"The producer is not part of current schedule\"\n  },\n  {\n    \"name\": \"snapshot_directory_not_found_exception\",\n    \"code\": \"3050006\",\n    \"en\": \"The configured snapshot directory does not exist\"\n  },\n  {\n    \"name\": \"snapshot_exists_exception\",\n    \"code\": \"3050007\",\n    \"en\": \"The requested snapshot already exists\"\n  },\n  {\n    \"name\": \"block_log_exception\",\n    \"code\": \"3060000\",\n    \"en\": \"Block log exception\"\n  },\n  {\n    \"name\": \"block_log_unsupported_version\",\n    \"code\": \"3060001\",\n    \"en\": \"unsupported version of block log\"\n  },\n  {\n    \"name\": \"block_log_append_fail\",\n    \"code\": \"3060002\",\n    \"en\": \"fail to append block to the block log\"\n  },\n  {\n    \"name\": \"block_log_not_found\",\n    \"code\": \"3060003\",\n    \"en\": \"block log can not be found\"\n  },\n  {\n    \"name\": \"block_log_backup_dir_exist\",\n    \"code\": \"3060004\",\n    \"en\": \"block log backup dir already exists\"\n  },\n  {\n    \"name\": \"fork_database_exception\",\n    \"code\": \"3080000\",\n    \"en\": \"Fork database exception\"\n  },\n  {\n    \"name\": \"fork_db_block_not_found\",\n    \"code\": \"3080001\",\n    \"en\": \"Block can not be found\"\n  },\n  {\n    \"name\": \"reversible_blocks_exception\",\n    \"code\": \"3090000\",\n    \"en\": \"Reversible Blocks exception\"\n  },\n  {\n    \"name\": \"invalid_reversible_blocks_dir\",\n    \"code\": \"3090001\",\n    \"en\": \"Invalid reversible blocks directory\"\n  },\n  {\n    \"name\": \"reversible_blocks_backup_dir_exist\",\n    \"code\": \"3090002\",\n    \"en\": \"Backup directory for reversible blocks already existg\"\n  },\n  {\n    \"name\": \"gap_in_reversible_blocks_db\",\n    \"code\": \"3090003\",\n    \"en\": \"Gap in the reversible blocks database\"\n  },\n  {\n    \"name\": \"misc_exception\",\n    \"code\": \"3100000\",\n    \"en\": \"Miscellaneous exception\"\n  },\n  {\n    \"name\": \"unknown_block_exception\",\n    \"code\": \"3100002\",\n    \"en\": \"unknown block\"\n  },\n  {\n    \"name\": \"unknown_transaction_exception\",\n    \"code\": \"3100003\",\n    \"en\": \"unknown transaction\"\n  },\n  {\n    \"name\": \"fixed_reversible_db_exception\",\n    \"code\": \"3100004\",\n    \"en\": \"Corrupted reversible block database was fixed.\"\n  },\n  {\n    \"name\": \"extract_genesis_state_exception\",\n    \"code\": \"3100005\",\n    \"en\": \"extracted genesis state from blocks.log\"\n  },\n  {\n    \"name\": \"unsupported_feature\",\n    \"code\": \"3100006\",\n    \"en\": \"Feature is currently unsupported\"\n  },\n  {\n    \"name\": \"node_management_success\",\n    \"code\": \"3100007\",\n    \"en\": \"Node management operation successfully executed\"\n  },\n  {\n    \"name\": \"authorization_exception\",\n    \"code\": \"3110000\",\n    \"en\": \"Authorization exception\"\n  },\n  {\n    \"name\": \"tx_duplicate_sig\",\n    \"code\": \"3110001\",\n    \"en\": \"Duplicate signature is included.\"\n  },\n  {\n    \"name\": \"tx_irrelevant_sig\",\n    \"code\": \"3110002\",\n    \"en\": \"Irrelevant signature is included.\"\n  },\n  {\n    \"name\": \"unsatisfied_authorization\",\n    \"code\": \"3110003\",\n    \"en\": \"Provided keys do not satisfy declared authorizations.\"\n  },\n  {\n    \"name\": \"chain_type_exception\",\n    \"code\": \"3120000\",\n    \"en\": \"chain type exception\"\n  },\n  {\n    \"name\": \"name_type_exception\",\n    \"code\": \"3120001\",\n    \"en\": \"Invalid name\"\n  },\n  {\n    \"name\": \"public_key_type_exception\",\n    \"code\": \"3120002\",\n    \"en\": \"Invalid public key\"\n  },\n  {\n    \"name\": \"private_key_type_exception\",\n    \"code\": \"3120003\",\n    \"en\": \"Invalid private key\"\n  },\n  {\n    \"name\": \"authority_type_exception\",\n    \"code\": \"3120004\",\n    \"en\": \"Invalid authority\"\n  },\n  {\n    \"name\": \"action_type_exception\",\n    \"code\": \"3120005\",\n    \"en\": \"Invalid action\"\n  },\n  {\n    \"name\": \"transaction_type_exception\",\n    \"code\": \"3120006\",\n    \"en\": \"Invalid transaction\"\n  },\n  {\n    \"name\": \"abi_type_exception\",\n    \"code\": \"3120007\",\n    \"en\": \"Invalid ABI\"\n  },\n  {\n    \"name\": \"block_id_type_exception\",\n    \"code\": \"3120009\",\n    \"en\": \"Invalid block ID\"\n  },\n  {\n    \"name\": \"transaction_id_type_exception\",\n    \"code\": \"3120010\",\n    \"en\": \"Invalid transaction ID\"\n  },\n  {\n    \"name\": \"packed_transaction_type_exception\",\n    \"code\": \"3120011\",\n    \"en\": \"Invalid packed transaction\"\n  },\n  {\n    \"name\": \"asset_type_exception\",\n    \"code\": \"3120012\",\n    \"en\": \"Invalid asset\"\n  },\n  {\n    \"name\": \"symbol_type_exception\",\n    \"code\": \"3120013\",\n    \"en\": \"Invalid symbol\"\n  },\n  {\n    \"name\": \"permission_type_exception\",\n    \"code\": \"3120014\",\n    \"en\": \"Invalid permission\"\n  },\n  {\n    \"name\": \"group_type_exception\",\n    \"code\": \"3120015\",\n    \"en\": \"Invalid group\"\n  },\n  {\n    \"name\": \"authorizer_ref_type_exception\",\n    \"code\": \"3120016\",\n    \"en\": \"Invalid authorizer ref\"\n  },\n  {\n    \"name\": \"address_type_exception\",\n    \"code\": \"3120017\",\n    \"en\": \"Invalid address\"\n  },\n  {\n    \"name\": \"name128_type_exception\",\n    \"code\": \"3120018\",\n    \"en\": \"Invalid name128\"\n  },\n  {\n    \"name\": \"chain_id_type_exception\",\n    \"code\": \"3120019\",\n    \"en\": \"Invalid chain id\"\n  },\n  {\n    \"name\": \"plugin_exception\",\n    \"code\": \"3130000\",\n    \"en\": \"plugin exception\"\n  },\n  {\n    \"name\": \"missing_chain_api_plugin_exception\",\n    \"code\": \"3130001\",\n    \"en\": \"Missing Chain API Plugin\"\n  },\n  {\n    \"name\": \"missing_wallet_api_plugin_exception\",\n    \"code\": \"3130002\",\n    \"en\": \"Missing Wallet API Plugin\"\n  },\n  {\n    \"name\": \"missing_net_api_plugin_exception\",\n    \"code\": \"3130003\",\n    \"en\": \"Missing Net API Plugin\"\n  },\n  {\n    \"name\": \"missing_evt_api_plugin_exception\",\n    \"code\": \"3130004\",\n    \"en\": \"Missing EVT API Plugin\"\n  },\n  {\n    \"name\": \"missing_history_api_plugin_exception\",\n    \"code\": \"3130005\",\n    \"en\": \"Missing History API Plugin\"\n  },\n  {\n    \"name\": \"plugin_config_exception\",\n    \"code\": \"3130006\",\n    \"en\": \"Incorrect plugin configuration\"\n  },\n  {\n    \"name\": \"missing_chain_plugin_exception\",\n    \"code\": \"3130008\",\n    \"en\": \"Missing Chain Plugin\"\n  },\n  {\n    \"name\": \"missing_producer_api_plugin_exception\",\n    \"code\": \"3130009\",\n    \"en\": \"Missing Producer API Plugin\"\n  },\n  {\n    \"name\": \"missing_postgres_plugin_exception\",\n    \"code\": \"3130010\",\n    \"en\": \"Missing postgres Plugin\"\n  },\n  {\n    \"name\": \"exceed_query_limit_exception\",\n    \"code\": \"3130011\",\n    \"en\": \"Exceed max query limit\"\n  },\n  {\n    \"name\": \"wallet_exception\",\n    \"code\": \"3140000\",\n    \"en\": \"wallet exception\"\n  },\n  {\n    \"name\": \"wallet_exist_exception\",\n    \"code\": \"3140001\",\n    \"en\": \"Wallet already exists\"\n  },\n  {\n    \"name\": \"wallet_nonexistent_exception\",\n    \"code\": \"3140002\",\n    \"en\": \"Nonexistent wallet\"\n  },\n  {\n    \"name\": \"wallet_locked_exception\",\n    \"code\": \"3140003\",\n    \"en\": \"Locked wallet\"\n  },\n  {\n    \"name\": \"wallet_missing_pub_key_exception\",\n    \"code\": \"3140004\",\n    \"en\": \"Missing public key\"\n  },\n  {\n    \"name\": \"wallet_invalid_password_exception\",\n    \"code\": \"3140005\",\n    \"en\": \"Invalid wallet password\"\n  },\n  {\n    \"name\": \"wallet_not_available_exception\",\n    \"code\": \"3140006\",\n    \"en\": \"No available wallet\"\n  },\n  {\n    \"name\": \"wallet_unlocked_exception\",\n    \"code\": \"3140007\",\n    \"en\": \"Already unlocked\"\n  },\n  {\n    \"name\": \"key_exist_exception\",\n    \"code\": \"3140008\",\n    \"en\": \"Key already exists\"\n  },\n  {\n    \"name\": \"key_nonexistent_exception\",\n    \"code\": \"3140009\",\n    \"en\": \"Nonexistent key\"\n  },\n  {\n    \"name\": \"unsupported_key_type_exception\",\n    \"code\": \"3140010\",\n    \"en\": \"Unsupported key type\"\n  },\n  {\n    \"name\": \"invalid_lock_timeout_exception\",\n    \"code\": \"3140011\",\n    \"en\": \"Wallet lock timeout is invalid\"\n  },\n  {\n    \"name\": \"secure_enclave_exception\",\n    \"code\": \"3140012\",\n    \"en\": \"Secure Enclave Exception\"\n  },\n  {\n    \"name\": \"token_database_exception\",\n    \"code\": \"3150000\",\n    \"en\": \"token_database exception\"\n  },\n  {\n    \"name\": \"token_database_key_already_existed\",\n    \"code\": \"3150001\",\n    \"en\": \"Key is already existed.\"\n  },\n  {\n    \"name\": \"token_database_key_not_found\",\n    \"code\": \"3150002\",\n    \"en\": \"Not found specific key.\"\n  },\n  {\n    \"name\": \"token_database_rocksdb_exception\",\n    \"code\": \"3150003\",\n    \"en\": \"Rocksdb internal error occurred.\"\n  },\n  {\n    \"name\": \"token_database_no_savepoint\",\n    \"code\": \"3150004\",\n    \"en\": \"No savepoints anymore\"\n  },\n  {\n    \"name\": \"token_database_seq_not_valid\",\n    \"code\": \"3150005\",\n    \"en\": \"Seq for checkpoint is not valid.\"\n  },\n  {\n    \"name\": \"token_database_db_action_exception\",\n    \"code\": \"3150006\",\n    \"en\": \"Unknown db action type.\"\n  },\n  {\n    \"name\": \"token_database_dirty_flag_exception\",\n    \"code\": \"3150007\",\n    \"en\": \"Checkspoints log file is in dirty.\"\n  },\n  {\n    \"name\": \"token_database_squash_exception\",\n    \"code\": \"3150008\",\n    \"en\": \"Cannot perform squash operation now\"\n  },\n  {\n    \"name\": \"token_database_snapshot_exception\",\n    \"code\": \"3150009\",\n    \"en\": \"Create or restore snapshot failed\"\n  },\n  {\n    \"name\": \"token_database_persist_exception\",\n    \"code\": \"3150010\",\n    \"en\": \"Persist savepoints failed\"\n  },\n  {\n    \"name\": \"guard_exception\",\n    \"code\": \"3160101\",\n    \"en\": \"Database exception\"\n  },\n  {\n    \"name\": \"database_guard_exception\",\n    \"code\": \"3160102\",\n    \"en\": \"Database usage is at unsafe levels\"\n  },\n  {\n    \"name\": \"reversible_guard_exception\",\n    \"code\": \"3160103\",\n    \"en\": \"Reversible block log usage is at unsafe levels\"\n  },\n  {\n    \"name\": \"controller_emit_signal_exception\",\n    \"code\": \"3170000\",\n    \"en\": \"Exceptions that are allowed to bubble out of emit calls in controller\"\n  },\n  {\n    \"name\": \"checkpoint_exception\",\n    \"code\": \"3170001\",\n    \"en\": \"Block does not match checkpoint\"\n  },\n  {\n    \"name\": \"http_exception\",\n    \"code\": \"3180000\",\n    \"en\": \"http exception\"\n  },\n  {\n    \"name\": \"invalid_http_client_root_cert\",\n    \"code\": \"3180001\",\n    \"en\": \"invalid http client root certificate\"\n  },\n  {\n    \"name\": \"invalid_http_response\",\n    \"code\": \"3180002\",\n    \"en\": \"invalid http response\"\n  },\n  {\n    \"name\": \"resolved_to_multiple_ports\",\n    \"code\": \"3180003\",\n    \"en\": \"service resolved to multiple ports\"\n  },\n  {\n    \"name\": \"fail_to_resolve_host\",\n    \"code\": \"3180004\",\n    \"en\": \"fail to resolve host\"\n  },\n  {\n    \"name\": \"http_request_fail\",\n    \"code\": \"3180005\",\n    \"en\": \"http request fail\"\n  },\n  {\n    \"name\": \"invalid_http_request\",\n    \"code\": \"3180006\",\n    \"en\": \"invalid http request\"\n  },\n  {\n    \"name\": \"exceed_deferred_request\",\n    \"code\": \"3180007\",\n    \"en\": \"exceed max http deferred request\"\n  },\n  {\n    \"name\": \"alloc_deferred_fail\",\n    \"code\": \"3180008\",\n    \"en\": \"Failed to alloc deferred id\"\n  },\n  {\n    \"name\": \"evt_link_plugin_exception\",\n    \"code\": \"3190000\",\n    \"en\": \"evt-link plugin exception\"\n  },\n  {\n    \"name\": \"evt_link_not_existed_now_excetpion\",\n    \"code\": \"3190001\",\n    \"en\": \"EVT-Link is not existed currently\"\n  },\n  {\n    \"name\": \"evt_link_already_watched_exception\",\n    \"code\": \"3190002\",\n    \"en\": \"EVT-Link is already watched\"\n  },\n  {\n    \"name\": \"exceed_evt_link_watch_time_exception\",\n    \"code\": \"3190003\",\n    \"en\": \"Exceed EVT-Link watch time\"\n  },\n  {\n    \"name\": \"resource_exhausted_exception\",\n    \"code\": \"3200000\",\n    \"en\": \"Resource exhausted exception\"\n  },\n  {\n    \"name\": \"tx_net_usage_exceeded\",\n    \"code\": \"3200001\",\n    \"en\": \"Transaction exceeded the current network usage limit imposed on the transaction\"\n  },\n  {\n    \"name\": \"block_net_usage_exceeded\",\n    \"code\": \"3200002\",\n    \"en\": \"Transaction network usage is too much for the remaining allowable usage of the current block\"\n  },\n  {\n    \"name\": \"abi_exception\",\n    \"code\": \"3210000\",\n    \"en\": \"ABI exception\"\n  },\n  {\n    \"name\": \"abi_not_found_exception\",\n    \"code\": \"3210001\",\n    \"en\": \"No ABI found\"\n  },\n  {\n    \"name\": \"invalid_ricardian_clause_exception\",\n    \"code\": \"3210002\",\n    \"en\": \"Invalid Ricardian Clause\"\n  },\n  {\n    \"name\": \"invalid_ricardian_action_exception\",\n    \"code\": \"3210003\",\n    \"en\": \"Invalid Ricardian Action\"\n  },\n  {\n    \"name\": \"invalid_type_inside_abi\",\n    \"code\": \"3210004\",\n    \"en\": \"The type defined in the ABI is invalid\"\n  },\n  {\n    \"name\": \"duplicate_abi_type_def_exception\",\n    \"code\": \"3210005\",\n    \"en\": \"Duplicate type definition in the ABI\"\n  },\n  {\n    \"name\": \"duplicate_abi_struct_def_exception\",\n    \"code\": \"3210006\",\n    \"en\": \"Duplicate struct definition in the ABI\"\n  },\n  {\n    \"name\": \"duplicate_abi_action_def_exception\",\n    \"code\": \"3210007\",\n    \"en\": \"Duplicate action definition in the ABI\"\n  },\n  {\n    \"name\": \"duplicate_abi_table_def_exception\",\n    \"code\": \"3210008\",\n    \"en\": \"Duplicate table definition in the ABI\"\n  },\n  {\n    \"name\": \"duplicate_abi_err_msg_def_exception\",\n    \"code\": \"3210009\",\n    \"en\": \"Duplicate error message definition in the ABI\"\n  },\n  {\n    \"name\": \"abi_serialization_deadline_exception\",\n    \"code\": \"3210010\",\n    \"en\": \"ABI serialization time has exceeded the deadline\"\n  },\n  {\n    \"name\": \"abi_recursion_depth_exception\",\n    \"code\": \"3210011\",\n    \"en\": \"ABI recursive definition has exceeded the max recursion depth\"\n  },\n  {\n    \"name\": \"abi_circular_def_exception\",\n    \"code\": \"3210012\",\n    \"en\": \"Circular definition is detected in the ABI\"\n  },\n  {\n    \"name\": \"unpack_exception\",\n    \"code\": \"3210013\",\n    \"en\": \"Unpack data exception\"\n  },\n  {\n    \"name\": \"pack_exception\",\n    \"code\": \"3210014\",\n    \"en\": \"Pack data exception\"\n  },\n  {\n    \"name\": \"duplicate_abi_variant_def_exception\",\n    \"code\": \"3210015\",\n    \"en\": \"Duplicate variant definition in the ABI\"\n  },\n  {\n    \"name\": \"unsupported_abi_version_exception\",\n    \"code\": \"3210016\",\n    \"en\": \"ABI has an unsupported version\"\n  },\n  {\n    \"name\": \"snapshot_exception\",\n    \"code\": \"3220000\",\n    \"en\": \"Snapshot exception\"\n  },\n  {\n    \"name\": \"snapshot_validation_exception\",\n    \"code\": \"3220001\",\n    \"en\": \"Snapshot Validation Exception\"\n  },\n  {\n    \"name\": \"postgres_plugin_exception\",\n    \"code\": \"3230000\",\n    \"en\": \"Postgres plugin exception\"\n  },\n  {\n    \"name\": \"postgres_connection_exception\",\n    \"code\": \"3230001\",\n    \"en\": \"Connect to postgresql server failed\"\n  },\n  {\n    \"name\": \"postgres_exec_exception\",\n    \"code\": \"3230002\",\n    \"en\": \"Execute statements failed\"\n  },\n  {\n    \"name\": \"postgres_version_exception\",\n    \"code\": \"3230003\",\n    \"en\": \"Version of postgres database is obsolete\"\n  },\n  {\n    \"name\": \"postgres_sync_exception\",\n    \"code\": \"3230004\",\n    \"en\": \"Sync failed between postgres database and current blockchain state\"\n  },\n  {\n    \"name\": \"postgres_send_exception\",\n    \"code\": \"3230005\",\n    \"en\": \"Send commands to postgres failed\"\n  },\n  {\n    \"name\": \"postgres_poll_exception\",\n    \"code\": \"3230006\",\n    \"en\": \"Poll messages from postgres failed\"\n  },\n  {\n    \"name\": \"postgres_query_exception\",\n    \"code\": \"3230007\",\n    \"en\": \"Query from postgres failed\"\n  },\n  {\n    \"name\": \"postgres_not_enabled_exception\",\n    \"code\": \"3230008\",\n    \"en\": \"Postgres plugin is not enabled\"\n  },\n  {\n    \"name\": \"execution_exception\",\n    \"code\": \"3240000\",\n    \"en\": \"Execution exception\"\n  },\n  {\n    \"name\": \"unknown_action_exception\",\n    \"code\": \"3240001\",\n    \"en\": \"Unknown action exception\"\n  },\n  {\n    \"name\": \"action_index_exception\",\n    \"code\": \"3240002\",\n    \"en\": \"Invalid action index exception\"\n  },\n  {\n    \"name\": \"action_version_exception\",\n    \"code\": \"3240003\",\n    \"en\": \"Invalid action version exception\"\n  }\n]\n","/**\n * Created by Administrator on 2018/12/5.\n */\n\nimport excodes from './excodes'\n// Browser kernel\nconst browser = {\n  versions: function () {\n    var u = navigator.userAgent;\n    return {\n      trident: u.indexOf('Trident') > -1, //IE\n      presto: u.indexOf('Presto') > -1, //opera\n      webKit: u.indexOf('AppleWebKit') > -1, //AppleWebKit\n      gecko: u.indexOf('Gecko') > -1 && u.indexOf('KHTML') == -1,//Gecko\n      mobile: !!u.match(/AppleWebKit.*Mobile.*/), //Mobile\n      ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios\n      android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1, //Android or UC\n      iPhone: u.indexOf('iPhone') > -1, //iPhone\n      iPad: u.indexOf('iPad') > -1, //iPad\n      webApp: u.indexOf('Safari') == -1, //Safari\n      weixin: u.toLowerCase().match(/MicroMessenger/i) == 'micromessenger', //wechat\n      qq: u.match(/\\sQQ/i) == \" qq\" //qq\n    };\n  }()\n};\n\n// Non-string to string\nexport const toStringify = (body) => {\n  if (typeof body !== 'string') {\n    return JSON.stringify(body)\n  } else {\n    return body\n  }\n}\n\n// Non-json to json\nexport const toJson = (body) => {\n  if (typeof body !== 'string') {\n    return body\n  } else {\n    return JSON.parse(body)\n  }\n}\n\nconst errorHandel = (code)=>{\n  let obj = {}\n  excodes.forEach((item)=>{\n    if(item.code == code){\n      obj = {cn:item.cn||item.en,en:item.en}\n    }\n  })\n  return obj\n}\n// error\nexport const errorHandle = (error) => {\n  if (error.isServerError) {\n    return {code: 0,data:'',message: errorHandel(error.serverError.code)}\n  } else {\n    return {code: 0,data:'',message: {cn:'isClientError:'+error.message,en:'isClientError:'+error.message}}\n  }\n}\n\n// Call the iOS or Android  method name handle wrapper\nexport const bridge = (handle, body) => {\n  if (body.code === 0) {} else {\n    body = {\n      code: 1,\n      data: body,\n      message: {}\n    }\n  }\n  body = JSON.stringify(body)\n  console.log(handle, body);\n  if (browser.versions.ios) {\n    if (window.webkit.messageHandlers[handle]) {\n      window.webkit.messageHandlers[handle].postMessage(body);\n    } else {\n      throw new Error('未检测到回调方法')\n    }\n  }\n  if (browser.versions.android) {\n    if (window.test[handle]) {\n      window.test[handle](body)\n    } else {\n      throw new Error('未检测到回调方法')\n    }\n  }\n}\n\n\n","/**\n * Created by Administrator on 2018/12/5.\n */\n\nimport EVT from 'evtjs';\nimport {bridge,errorHandle,toJson,toStringify} from './bridge'\n\n\n\n// EVT API document\n// github => https://www.everitoken.io/developers/apis,_sdks_and_tools/javascript_sdk_reference/en_US\n\nwindow.randomPrivateKey = async () => {\n  let body\n  try {\n    body = await EVT.EvtKey.randomPrivateKey()\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('randomPrivateKeyCallback', body)\n}\n\n\nwindow.privateToPublic = (privateKey) => {\n  let body\n  try {\n    body = EVT.EvtKey.privateToPublic(privateKey)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('privateToPublicCallback', body)\n}\n\n\nwindow.seedPrivateKey = (seed) => {\n  let body\n  try {\n    body = EVT.EvtKey.seedPrivateKey(seed)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('seedPrivateKeyCallback', body)\n}\n\n\nwindow.isValidPrivateKey = (key) => {\n  let body\n  try {\n    body = EVT.EvtKey.isValidPrivateKey(key)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('isValidPrivateKeyCallback', body)\n}\n\n\nwindow.isValidPublicKey = (key) => {\n  let body\n  try {\n    body = EVT.EvtKey.isValidPublicKey(key)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('isValidPublicKeyCallback', body)\n}\n\n\nwindow.isValidAddress = (address) => {\n  let body\n  try {\n    body = EVT.EvtKey.isValidAddress(address)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('isValidAddressCallback', body)\n}\n\n\nwindow.random32BytesAsHex = async () => {\n  let body\n  try {\n    body = await EVT.EvtKey.random32BytesAsHex()\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('random32BytesAsHexCallback', body)\n}\n\n\nwindow.randomName128 = async () => {\n  let body\n  try {\n    body = await EVT.EvtKey.randomName128()\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('randomName128Callback', body)\n}\n\n\nwindow.getNullAddress = () => {\n  let body\n  try {\n    body = EVT.EvtKey.getNullAddress(address)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getNullAddressCallback', body)\n}\n\n\n//apiCaller\n\nlet apiCaller = null\nwindow.needPrivateKeyResponse = null\n\nlet network = {\n  host: 'mainnet14.everitoken.io',\n  port: 443,\n  protocol: 'https'\n};\n\nwindow.changeNetwork = (obj) => {\n  network = toJson(obj)\n}\n\nwindow.EVTInit = () => {\n  let body = ''\n  try {\n    apiCaller = EVT({\n      endpoint: network,\n      keyProvider: () => {\n        return new Promise((res, rej) => {\n          console.log('needPrivateKeyResponse')\n          window.needPrivateKeyResponse = res\n          if(process.env.NODE_ENV === 'development'){\n            res('5JrNgyyNDqz2pikijgdJwUktV8xkS7JPPSURr2YwxkhKPzm2eRi');\n          }else{\n            bridge('needPrivateKey', '')\n          }\n        });\n      }\n    });\n    window.apiCaller = apiCaller\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('EVTInitCallback', body)\n\n}\n\n\nwindow.getInfo = async () => {\n  let body\n  try {\n    body = await apiCaller.getInfo()\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getInfoCallback', body)\n}\n\n\nwindow.getHeadBlockHeaderState = async () => {\n  let body\n  try {\n    body = await apiCaller.getHeadBlockHeaderState()\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getHeadBlockHeaderStateCallback', body)\n}\n\nwindow.getTransactionIdsInBlock = async (blockId) => {\n  let body\n  try {\n    body = await apiCaller.getTransactionIdsInBlock(blockId)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getTransactionIdsInBlockCallback', body)\n}\n\nwindow.getOwnedTokens = async (publicKeys) => {\n  let body\n  try {\n    body = await apiCaller.getOwnedTokens(publicKeys)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getOwnedTokensCallback', body)\n}\n\n\nwindow.getTokens = async (domain, skip = 0, take = 10) => {\n  let body\n  try {\n    body = await apiCaller.getTokens(domain,skip,take)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getTokensCallback', body)\n}\n\nwindow.getManagedGroups = async (publicKeys) => {\n  let body\n  try {\n    body = await apiCaller.getManagedGroups(publicKeys)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getManagedGroupsCallback', body)\n}\n\n\nwindow.getCreatedDomains = async (publicKeys) => {\n  let body\n  try {\n    body = await apiCaller.getCreatedDomains(publicKeys)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getCreatedDomainsCallback', body)\n}\n\n\nwindow.getCreatedFungibles = async (publicKeys) => {\n  let body\n  try {\n    body = await apiCaller.getCreatedFungibles(publicKeys)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getCreatedFungiblesCallback', body)\n}\n\n\nwindow.getActions = async (params) => {\n  params = toJson(params)\n  let body\n  try {\n    body = await apiCaller.getActions(params)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getActionsCallback', body)\n}\n\n\nwindow.getToken = async (domain, id) => {\n  let body\n  try {\n    body = await apiCaller.getToken(domain, id)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getTokenCallback', body)\n}\n\n\nwindow.getFungibleBalance = async (address, symbolId) => {\n  if (typeof symbolId === 'string') {\n    symbolId = Number(symbolId)\n  }\n  let body\n  try {\n    body = await apiCaller.getFungibleBalance(address, symbolId)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getFungibleBalanceCallback', body)\n}\n\n\nwindow.getTransactionDetailById = async (id) => {\n  let body\n  try {\n    body = await apiCaller.getTransactionDetailById(id)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getTransactionDetailByIdCallback', body)\n}\n\n\nwindow.getDomainDetail = async (name) => {\n  let body\n  try {\n    body = await apiCaller.getDomainDetail(name)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getDomainDetailCallback', body)\n}\n\n\nwindow.getGroupDetail = async (name) => {\n  let body\n  try {\n    body = await apiCaller.getGroupDetail(name)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getGroupDetailCallback', body)\n}\n\n\nwindow.getFungibleActionsByAddress = async (symbolId, address, skip = 0, take = 10) => {\n  let body\n  try {\n    body = await apiCaller.getFungibleActionsByAddress(symbolId, address, skip, take)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getFungibleActionsByAddressCallback', body)\n}\n\n\nwindow.getTransactionsDetailOfPublicKeys = async (publickeys, skip = 0, take = 10) => {\n  let body\n  try {\n    body = await apiCaller.getTransactionsDetailOfPublicKeys(publickeys, skip, take)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getTransactionsDetailOfPublicKeysCallback', body)\n}\n\n\nwindow.getFungibleSymbolDetail = async (sym_id) => {\n  let body\n  try {\n    body = await apiCaller.getFungibleSymbolDetail(sym_id)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getFungibleSymbolDetailCallback', body)\n}\n\n\nwindow.getRequiredKeysForSuspendedTransaction = async (proposalName, availableKeys) => {\n  let body\n  try {\n    body = await apiCaller.getRequiredKeysForSuspendedTransaction(proposalName, availableKeys)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getRequiredKeysForSuspendedTransactionCallback', body)\n}\n\n\nwindow.getStatusOfEvtLink = async (options) => {\n  options = toJson(options)\n  let body\n  try {\n    body = await apiCaller.getStatusOfEvtLink(options)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getStatusOfEvtLinkCallback', body)\n}\n\n\nwindow.getSuspendedTransactionDetail = async (proposalName) => {\n  let body\n  try {\n    body = await apiCaller.getSuspendedTransactionDetail(proposalName)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getSuspendedTransactionDetailCallback', body)\n}\n\n\nwindow.getEstimatedChargeForTransaction = async (newdomain, json, config) => {\n  json = toJson(json)\n  config = toJson(config)\n  let body\n  try {\n    if (config) {\n      body = await apiCaller.getEstimatedChargeForTransaction(config,\n        new EVT.EvtAction(newdomain, json)\n      )\n    } else {\n      body = await apiCaller.getEstimatedChargeForTransaction(\n        new EVT.EvtAction(newdomain, json)\n      )\n    }\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getEstimatedChargeForTransactionCallback', body)\n}\n\n\nwindow.generateUnsignedTransaction = async (newdomain, json, config) => {\n  json = toJson(json)\n  config = toJson(config)\n  let body\n  try {\n    if (config) {\n      body = await apiCaller.generateUnsignedTransaction(config,\n        new EVT.EvtAction(newdomain, json)\n      )\n    } else {\n      body = await apiCaller.generateUnsignedTransaction(\n        new EVT.EvtAction(newdomain, json)\n      )\n    }\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('generateUnsignedTransactionCallback', body)\n}\n\n\nwindow.pushTransaction = async (newdomain, json, config,domain,key) => {\n  json = toJson(json)\n  config = toJson(config)\n  newdomain = newdomain.split(',')\n  if(!Array.isArray(json)){\n    json = [json]\n  }\n  let body\n  body = []\n  newdomain.forEach((item,index) => {\n    body.push(new EVT.EvtAction(item, json[index],domain,key))\n  })\n  try {\n    if(config){\n      body = await apiCaller.pushTransaction(config,...body)\n    }else{\n      body = await apiCaller.pushTransaction(...body)\n    }\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('pushTransactionCallback', body)\n}\n\n\n// EvtLink\nwindow.getUniqueLinkId = async () => {\n  let body\n  try {\n    body = await EVT.EvtLink.getUniqueLinkId()\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getUniqueLinkIdCallback', body)\n}\n\nlet intervalId = 0\nwindow.getEVTLinkQrImage = async (qrType, qrParams, imgParams) => {\n  qrParams = toJson(qrParams)\n  imgParams = toJson(imgParams)\n  let body\n  try {\n    body = await EVT.EvtLink.getEVTLinkQrImage(qrType, qrParams, imgParams, (err, res) => {\n      if (err) {\n        bridge('getEVTLinkQrImageCallback', errorHandle({isServerError: false}))\n        return;\n      }\n      bridge('getEVTLinkQrImageCallback', res)\n    })\n    intervalId = body.intervalId\n  } catch (error) {\n    body = errorHandle(error)\n    bridge('getEVTLinkQrImageCallback', body)\n  }\n}\n\nwindow.stopEVTLinkQrImageReload = ()=>{\n  window.clearInterval(intervalId)\n}\n\nwindow.parseEvtLink = async (text, options) => {\n  options = toJson(options)\n  let body\n  try {\n    body = await EVT.EvtLink.parseEvtLink(text, options)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('parseEvtLinkCallback', body)\n}\n\n\nwindow.getEvtLinkForEveriPass = async (params) => {\n  params = toJson(params)\n  let body\n  try {\n    body = await EVT.EvtLink.getEvtLinkForEveriPass(params)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getEvtLinkForEveriPassCallback', body)\n}\n\n\nwindow.getEvtLinkForEveriPay = async (params) => {\n  params = toJson(params)\n  let body\n  try {\n    body = await EVT.EvtLink.getEvtLinkForEveriPay(params)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getEvtLinkForEveriPayCallback', body)\n}\n\n\nwindow.getEvtLinkForPayeeCode = async (params) => {\n  params = toJson(params)\n  let body\n  try {\n    body = await EVT.EvtLink.getEvtLinkForPayeeCode(params)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getEvtLinkForPayeeCodeCallback', body)\n}\n\n\n\n\n","/**\n * Created by Administrator on 2018/12/6.\n */\nimport bip39 from 'bip39'\nimport {bridge} from './bridge'\n\n\n// Generate a random mnemonic (uses crypto.randomBytes under the hood), defaults to 128-bits of entropy\nwindow.generateMnemonic = () => {\n  let body = bip39.generateMnemonic(words)\n  bridge('generateMnemonicCallback',body)\n}\n\n// mnemonic to seedHex\nwindow.mnemonicToSeedHex = (words) => {\n  let body = bip39.mnemonicToSeedHex(words)\n  bridge('mnemonicToSeedHexCallback',body)\n}\n\n// mnemonic to seed\nwindow.mnemonicToSeed = (words,password) => {\n  let body\n  if(password){\n    body = bip39.mnemonicToSeed(words,password)\n  }else{\n    body = bip39.mnemonicToSeed(words)\n  }\n  bridge('mnemonicToSeedCallback',body)\n}\n\n// validate mnemonic\nwindow.validateMnemonic = (mnemonic) => {\n  let body = bip39.validateMnemonic(mnemonic)\n  bridge('validateMnemonicCallback',body)\n}\n\n// defaults to BIP39 English word list\n// uses HEX strings for entropy\nwindow.entropyToMnemonic = (str) => {\n  let body = bip39.entropyToMnemonic(str)\n  bridge('entropyToMnemonicCallback',body)\n}\n\n// uses mnemonic for HEX\nwindow.mnemonicToEntropy = (mnemonic) => {\n  let body = bip39.mnemonicToEntropy(mnemonic)\n  bridge('mnemonicToEntropyCallback',body)\n}\n\n\n\n","import './utils/evtAPI'\r\nimport './utils/bip39API'\r\nimport {bridge,errorHandle} from './utils/bridge'\r\nimport EVT from 'evtjs';\r\nimport bip39 from 'bip39'\r\n\r\n\r\n// create EVTWallet\r\nwindow.createEVTWallet = async (password) => {\r\n  let body\r\n  try {\r\n    // random 16bytes as hex\r\n    let entropy = (await  EVT.EvtKey.random32BytesAsHex()).substring(32);\r\n\r\n    // uses HEX strings for entropy\r\n    let mnemoinc = bip39.entropyToMnemonic(entropy);\r\n\r\n    let seed = bip39.mnemonicToSeedHex(mnemoinc);\r\n    let privateKey = await EVT.EvtKey.seedPrivateKey(seed);\r\n    let publicKey = EVT.EvtKey.privateToPublic(privateKey);\r\n\r\n    body = {\r\n      mnemoinc: mnemoinc,\r\n      privateKey: privateKey,\r\n      publicKey: publicKey,\r\n      password: password,\r\n      type: 'EVT'\r\n    }\r\n  } catch (error) {\r\n    body = errorHandle(error)\r\n  }\r\n  bridge('createEVTWalletCallback', body)\r\n}\r\n\r\n// import EVTWallet\r\nwindow.importEVTWallet = async (mnemoinc, password) => {\r\n\r\n  let body\r\n  try {\r\n    let seed = bip39.mnemonicToSeedHex(mnemoinc);\r\n    let privateKey = await EVT.EvtKey.seedPrivateKey(seed);\r\n    let publicKey = EVT.EvtKey.privateToPublic(privateKey)\r\n\r\n    body = {\r\n      mnemoinc: mnemoinc,\r\n      privateKey: privateKey,\r\n      publicKey: publicKey,\r\n      password: password,\r\n      type: 'EVT'\r\n    }\r\n  } catch (error) {\r\n    body = errorHandle(error)\r\n  }\r\n  bridge('importEVTWalletCallback', body)\r\n}\r\n\r\nwindow.getEVTFungiblesList = async(publicKeys)=>{\r\n  let body = []\r\n  try {\r\n    let arr = await window.apiCaller.getCreatedFungibles(publicKeys)\r\n    console.log(arr)\r\n    arr.ids.forEach(item => {\r\n      let detail = window.apiCaller.getFungibleSymbolDetail(item)\r\n      body.push(detail)\r\n    })\r\n    Promise.all(body).then((result)=>{\r\n      bridge('getEVTFungiblesListCallback', result)\r\n    }).catch((error)=>{\r\n      body = errorHandle(error)\r\n      bridge('getEVTFungiblesListCallback', body)\r\n    })\r\n  } catch (error) {\r\n    body = errorHandle(error)\r\n    bridge('getEVTFungiblesListCallback', body)\r\n  }\r\n}\r\n\r\n\r\nwindow.getEVTDomainsList = async(publicKeys)=>{\r\n  let body = []\r\n  try {\r\n    let arr = await window.apiCaller.getCreatedDomains(publicKeys)\r\n    arr.forEach(item => {\r\n      let detail = window.apiCaller.getDomainDetail(item.name)\r\n      body.push(detail)\r\n    })\r\n    Promise.all(body).then((result)=>{\r\n      bridge('getEVTDomainsListCallback', result)\r\n    }).catch((error)=>{\r\n      body = errorHandle(error)\r\n      bridge('getEVTDomainsListCallback', body)\r\n    })\r\n  } catch (error) {\r\n    body = errorHandle(error)\r\n    bridge('getEVTDomainsListCallback', body)\r\n  }\r\n}\r\n\r\n\r\nwindow.getEVTFungibleBalanceList = async(publicKeys,symbolId)=>{\r\n  let body = []\r\n  try {\r\n    let arr = await window.apiCaller.getFungibleBalance(publicKeys,symbolId)\r\n    arr.forEach(item => {\r\n      let detail = window.apiCaller.getFungibleSymbolDetail(Number(item.split('#')[1]))\r\n      body.push(detail)\r\n    })\r\n    Promise.all(body).then((result)=>{\r\n      arr.forEach((item,i)=>{\r\n        result[i].asset = item\r\n      })\r\n      bridge('getEVTFungibleBalanceListCallback', result)\r\n    }).catch((error)=>{\r\n      body = errorHandle(error)\r\n      bridge('getEVTFungibleBalanceListCallback', body)\r\n    })\r\n  } catch (error) {\r\n    body = errorHandle(error)\r\n    bridge('getEVTFungibleBalanceListCallback', body)\r\n  }\r\n}\r\n\r\n\r\n\r\n"],"sourceRoot":""}