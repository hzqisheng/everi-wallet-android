{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/utils/bridge.js","webpack:///./src/utils/evtAPI.js","webpack:///./src/utils/bip39API.js","webpack:///./src/main.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","app","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","browser","versions","u","navigator","userAgent","trident","indexOf","presto","webKit","gecko","mobile","match","ios","android","iPhone","iPad","webApp","weixin","toLowerCase","qq","toJson","body","JSON","parse","errorHandle","error","isServerError","code","message","bridge","handle","console","log","stringify","webkit","messageHandlers","Error","postMessage","test","randomPrivateKey","async","lib_default","a","EvtKey","privateToPublic","privateKey","seedPrivateKey","seed","isValidPrivateKey","isValidPublicKey","isValidAddress","address","random32BytesAsHex","randomName128","getNullAddress","apiCaller","needPrivateKeyResponse","EVTInit","network","host","port","protocol","endpoint","keyProvider","Promise","res","rej","getInfo","getHeadBlockHeaderState","getOwnedTokens","publicKeys","getManagedGroups","getCreatedDomains","getCreatedFungibles","getActions","params","getToken","domain","id","getFungibleBalance","symbolId","Number","getTransactionDetailById","getDomainDetail","getGroupDetail","getFungibleActionsByAddress","skip","take","getTransactionsDetailOfPublicKeys","publickeys","getFungibleSymbolDetail","sym_id","getRequiredKeysForSuspendedTransaction","proposalName","availableKeys","getStatusOfEvtLink","options","getSuspendedTransactionDetail","getEstimatedChargeForTransaction","newdomain","json","config","EvtAction","generateUnsignedTransaction","pushTransaction","getUniqueLinkId","EvtLink","getEVTLinkQrImage","qrType","qrParams","imgParams","err","parseEvtLink","text","getEvtLinkForEveriPass","getEvtLinkForEveriPay","getEvtLinkForPayeeCode","generateMnemonic","bip39_default","words","mnemonicToSeedHex","mnemonicToSeed","password","validateMnemonic","mnemonic","entropyToMnemonic","str","mnemonicToEntropy","createEVTWallet","entropy","substring","mnemoinc","publicKey","type","importEVTWallet","getEVTFungiblesList","arr","ids","forEach","item","detail","all","then","catch","getEVTDomainsList","getEVTFungibleBalanceList","split","asset"],"mappings":"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","file":"js/app.57190667.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","/**\n * Created by Administrator on 2018/12/5.\n */\n\n// Browser kernel\nconst browser = {\n  versions: function () {\n    var u = navigator.userAgent;\n    return {\n      trident: u.indexOf('Trident') > -1, //IE\n      presto: u.indexOf('Presto') > -1, //opera\n      webKit: u.indexOf('AppleWebKit') > -1, //AppleWebKit\n      gecko: u.indexOf('Gecko') > -1 && u.indexOf('KHTML') == -1,//Gecko\n      mobile: !!u.match(/AppleWebKit.*Mobile.*/), //Mobile\n      ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios\n      android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1, //Android or UC\n      iPhone: u.indexOf('iPhone') > -1, //iPhone\n      iPad: u.indexOf('iPad') > -1, //iPad\n      webApp: u.indexOf('Safari') == -1, //Safari\n      weixin: u.toLowerCase().match(/MicroMessenger/i) == 'micromessenger', //wechat\n      qq: u.match(/\\sQQ/i) == \" qq\" //qq\n    };\n  }()\n};\n\n// Non-string to string\nexport const toStringify = (body) => {\n  if (typeof body !== 'string') {\n    return JSON.stringify(body)\n  } else {\n    return body\n  }\n}\n\n// Non-json to json\nexport const toJson = (body) => {\n  if (typeof body !== 'string') {\n    return body\n  } else {\n    return JSON.parse(body)\n  }\n}\n\n// error\nexport const errorHandle = (error) => {\n  if (error.isServerError) {\n    return {code: 0,data:'',message: 'isServerError:'+error.message}\n\n  } else {\n    return {code: 0,data:'',message: 'isClientError:'+error.message}\n  }\n}\n\n// Call the iOS or Android  method name handle wrapper\nexport const bridge = (handle, body) => {\n  if (body.code === 0) {} else {\n    body = {\n      code: 1,\n      data: body,\n      message:''\n    }\n  }\n  console.log(handle, JSON.stringify(body));\n\n  if (browser.versions.ios) {\n    if (window.webkit.messageHandlers[handle]) {\n      window.webkit.messageHandlers[handle].postMessage(body);\n    } else {\n      throw new Error('未检测到回调方法')\n    }\n  }\n  if (browser.versions.android) {\n    body = JSON.stringify(body)\n    if (window.test[handle]) {\n      window.test[handle](body)\n    } else {\n      throw new Error('未检测到回调方法')\n    }\n  }\n}\n\n\n","/**\n * Created by Administrator on 2018/12/5.\n */\n\nimport EVT from 'evtjs';\nimport {bridge,errorHandle,toJson,toStringify} from './bridge'\n\n\n\n// EVT API document\n// github => https://www.everitoken.io/developers/apis,_sdks_and_tools/javascript_sdk_reference/en_US\n\nwindow.randomPrivateKey = async () => {\n  let body\n  try {\n    body = await EVT.EvtKey.randomPrivateKey()\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('randomPrivateKeyCallback', body)\n}\n\n\nwindow.privateToPublic = (privateKey) => {\n  let body\n  try {\n    body = EVT.EvtKey.privateToPublic(privateKey)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('privateToPublicCallback', body)\n}\n\n\nwindow.seedPrivateKey = (seed) => {\n  let body\n  try {\n    body = EVT.EvtKey.seedPrivateKey(seed)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('seedPrivateKeyCallback', body)\n}\n\n\nwindow.isValidPrivateKey = (key) => {\n  let body\n  try {\n    body = EVT.EvtKey.isValidPrivateKey(key)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('isValidPrivateKeyCallback', body)\n}\n\n\nwindow.isValidPublicKey = (key) => {\n  let body\n  try {\n    body = EVT.EvtKey.isValidPublicKey(key)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('isValidPublicKeyCallback', body)\n}\n\n\nwindow.isValidAddress = (address) => {\n  let body\n  try {\n    body = EVT.EvtKey.isValidAddress(address)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('isValidAddressCallback', body)\n}\n\n\nwindow.random32BytesAsHex = async () => {\n  let body\n  try {\n    body = await EVT.EvtKey.random32BytesAsHex()\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('random32BytesAsHexCallback', body)\n}\n\n\nwindow.randomName128 = async () => {\n  let body\n  try {\n    body = await EVT.EvtKey.randomName128()\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('randomName128Callback', body)\n}\n\n\nwindow.getNullAddress = () => {\n  let body\n  try {\n    body = EVT.EvtKey.getNullAddress(address)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getNullAddressCallback', body)\n}\n\n\n//apiCaller\n\nlet apiCaller = null\n\nwindow.needPrivateKeyResponse = null\n\nwindow.EVTInit = () => {\n  let body = ''\n  try {\n    const network = {\n      host: 'mainnet14.everitoken.io',\n      port: 443,\n      protocol: 'https'\n    };\n    apiCaller = EVT({\n      endpoint: network,\n      keyProvider: () => {\n        return new Promise((res, rej) => {\n          window.needPrivateKeyResponse = res\n          bridge('needPrivateKey', '')\n          //res('5JrNgyyNDqz2pikijgdJwUktV8xkS7JPPSURr2YwxkhKPzm2eRi');\n        });\n      }\n    });\n    window.apiCaller = apiCaller\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('EVTInitCallback', body)\n\n}\n\n\nwindow.getInfo = async () => {\n  let body\n  try {\n    body = await apiCaller.getInfo()\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getInfoCallback', body)\n}\n\n\nwindow.getHeadBlockHeaderState = async () => {\n  let body\n  try {\n    body = await apiCaller.getHeadBlockHeaderState()\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getHeadBlockHeaderStateCallback', body)\n}\n\n\nwindow.getOwnedTokens = async (publicKeys) => {\n  let body\n  try {\n    body = await apiCaller.getOwnedTokens(publicKeys)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getOwnedTokensCallback', body)\n}\n\n\nwindow.getManagedGroups = async (publicKeys) => {\n  let body\n  try {\n    body = await apiCaller.getManagedGroups(publicKeys)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getManagedGroupsCallback', body)\n}\n\n\nwindow.getCreatedDomains = async (publicKeys) => {\n  let body\n  try {\n    body = await apiCaller.getCreatedDomains(publicKeys)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getCreatedDomainsCallback', body)\n}\n\n\nwindow.getCreatedFungibles = async (publicKeys) => {\n  let body\n  try {\n    body = await apiCaller.getCreatedFungibles(publicKeys)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getCreatedFungiblesCallback', body)\n}\n\n\nwindow.getActions = async (params) => {\n  let body\n  try {\n    body = await apiCaller.getActions(params)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getActionsCallback', body)\n}\n\n\nwindow.getToken = async (domain, id) => {\n  let body\n  try {\n    body = await apiCaller.getToken(domain, id)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getTokenCallback', body)\n}\n\n\nwindow.getFungibleBalance = async (address, symbolId) => {\n  if (typeof symbolId === 'string') {\n    symbolId = Number(symbolId)\n  }\n  let body\n  try {\n    body = await apiCaller.getFungibleBalance(address, symbolId)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getFungibleBalanceCallback', body)\n}\n\n\nwindow.getTransactionDetailById = async (id) => {\n  let body\n  try {\n    body = await apiCaller.getTransactionDetailById(id)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getTransactionDetailByIdCallback', body)\n}\n\n\nwindow.getDomainDetail = async (name) => {\n  let body\n  try {\n    body = await apiCaller.getDomainDetail(name)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getDomainDetailCallback', body)\n}\n\n\nwindow.getGroupDetail = async (name) => {\n  let body\n  try {\n    body = await apiCaller.getGroupDetail(name)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getGroupDetailCallback', body)\n}\n\n\nwindow.getFungibleActionsByAddress = async (symbolId, address, skip = 0, take = 10) => {\n  let body\n  try {\n    body = await apiCaller.getFungibleActionsByAddress(symbolId, address, skip, take)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getFungibleActionsByAddressCallback', body)\n}\n\n\nwindow.getTransactionsDetailOfPublicKeys = async (publickeys, skip = 0, take = 10) => {\n  let body\n  try {\n    body = await apiCaller.getTransactionsDetailOfPublicKeys(publickeys, skip, take)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getTransactionsDetailOfPublicKeysCallback', body)\n}\n\n\nwindow.getFungibleSymbolDetail = async (sym_id) => {\n  let body\n  try {\n    body = await apiCaller.getFungibleSymbolDetail(sym_id)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getFungibleSymbolDetailCallback', body)\n}\n\n\nwindow.getRequiredKeysForSuspendedTransaction = async (proposalName, availableKeys) => {\n  let body\n  try {\n    body = await apiCaller.getRequiredKeysForSuspendedTransaction(proposalName, availableKeys)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getRequiredKeysForSuspendedTransactionCallback', body)\n}\n\n\nwindow.getStatusOfEvtLink = async (options) => {\n  options = toJson(options)\n  let body\n  try {\n    body = await apiCaller.getStatusOfEvtLink(options)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getStatusOfEvtLinkCallback', body)\n}\n\n\nwindow.getSuspendedTransactionDetail = async (proposalName) => {\n  let body\n  try {\n    body = await apiCaller.getSuspendedTransactionDetail(proposalName)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getSuspendedTransactionDetailCallback', body)\n}\n\n\nwindow.getEstimatedChargeForTransaction = async (newdomain, json, config) => {\n  json = toJson(json)\n  config = toJson(config)\n  let body\n  try {\n    if (config) {\n      body = await apiCaller.getEstimatedChargeForTransaction(config,\n        new EVT.EvtAction(newdomain, json)\n      )\n    } else {\n      body = await apiCaller.getEstimatedChargeForTransaction(\n        new EVT.EvtAction(newdomain, json)\n      )\n    }\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getEstimatedChargeForTransactionCallback', body)\n}\n\n\nwindow.generateUnsignedTransaction = async (newdomain, json, config) => {\n  json = toJson(json)\n  config = toJson(config)\n  let body\n  try {\n    if (config) {\n      body = await apiCaller.generateUnsignedTransaction(config,\n        new EVT.EvtAction(newdomain, json)\n      )\n    } else {\n      body = await apiCaller.generateUnsignedTransaction(\n        new EVT.EvtAction(newdomain, json)\n      )\n    }\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('generateUnsignedTransactionCallback', body)\n}\n\n\nwindow.pushTransaction = async (newdomain, json, config) => {\n  json = toJson(json)\n  config = toJson(config)\n  let body\n  try {\n    if (config) {\n      body = await apiCaller.pushTransaction(config,\n        new EVT.EvtAction(newdomain, json)\n      )\n    } else {\n      body = await apiCaller.pushTransaction(\n        new EVT.EvtAction(newdomain, json)\n      )\n    }\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('pushTransactionCallback', body)\n}\n\n\n// EvtLink\nwindow.getUniqueLinkId = async () => {\n  let body\n  try {\n    body = await EVT.EvtLink.getUniqueLinkId()\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getUniqueLinkIdCallback', body)\n}\n\n\nwindow.getEVTLinkQrImage = (qrType, qrParams, imgParams) => {\n  qrParams = toJson(qrParams)\n  imgParams = toJson(imgParams)\n  let body\n  try {\n    EVT.EvtLink.getEVTLinkQrImage(qrType, qrParams, imgParams, (err, res) => {\n      if (err) {\n        bridge('getEVTLinkQrImageCallback', errorHandle({isServerError: false}))\n        return;\n      }\n      bridge('getEVTLinkQrImageCallback', res)\n    })\n  } catch (error) {\n    body = errorHandle(error)\n    bridge('getEVTLinkQrImageCallback', body)\n  }\n}\n\n\nwindow.parseEvtLink = async (text, options) => {\n  options = toJson(options)\n  let body\n  try {\n    body = await EVT.EvtLink.parseEvtLink(text, options)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('parseEvtLinkCallback', body)\n}\n\n\nwindow.getEvtLinkForEveriPass = async (params) => {\n  params = toJson(params)\n  let body\n  try {\n    body = await EVT.EvtLink.getEvtLinkForEveriPass(params)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getEvtLinkForEveriPassCallback', body)\n}\n\n\nwindow.getEvtLinkForEveriPay = async (params) => {\n  params = toJson(params)\n  let body\n  try {\n    body = await EVT.EvtLink.getEvtLinkForEveriPay(params)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getEvtLinkForEveriPayCallback', body)\n}\n\n\nwindow.getEvtLinkForPayeeCode = async (params) => {\n  params = toJson(params)\n  let body\n  try {\n    body = await EVT.EvtLink.getEvtLinkForPayeeCode(params)\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('getEvtLinkForPayeeCodeCallback', body)\n}\n\n\n\n\n//getEVTLinkQrImage('payeecode',{address:'EVT6Gx3o9P4BAmcjxGenBgmAQ82bgfvS8GHgrFPUPzYUn6uxWdLFW'},{autoReload: true})\n\n\n\n","/**\n * Created by Administrator on 2018/12/6.\n */\nimport bip39 from 'bip39'\nimport {bridge} from './bridge'\n\n\n// Generate a random mnemonic (uses crypto.randomBytes under the hood), defaults to 128-bits of entropy\nwindow.generateMnemonic = () => {\n  let body = bip39.generateMnemonic(words)\n  bridge('generateMnemonicCallback',body)\n}\n\n// mnemonic to seedHex\nwindow.mnemonicToSeedHex = (words) => {\n  let body = bip39.mnemonicToSeedHex(words)\n  bridge('mnemonicToSeedHexCallback',body)\n}\n\n// mnemonic to seed\nwindow.mnemonicToSeed = (words,password) => {\n  let body\n  if(password){\n    body = bip39.mnemonicToSeed(words,password)\n  }else{\n    body = bip39.mnemonicToSeed(words)\n  }\n  bridge('mnemonicToSeedCallback',body)\n}\n\n// validate mnemonic\nwindow.validateMnemonic = (mnemonic) => {\n  let body = bip39.validateMnemonic(mnemonic)\n  bridge('validateMnemonicCallback',body)\n}\n\n// defaults to BIP39 English word list\n// uses HEX strings for entropy\nwindow.entropyToMnemonic = (str) => {\n  let body = bip39.entropyToMnemonic(str)\n  bridge('entropyToMnemonicCallback',body)\n}\n\n// uses mnemonic for HEX\nwindow.mnemonicToEntropy = (mnemonic) => {\n  let body = bip39.mnemonicToEntropy(mnemonic)\n  bridge('mnemonicToEntropyCallback',body)\n}\n\n\n\n","import './utils/evtAPI'\nimport './utils/bip39API'\nimport {bridge,errorHandle} from './utils/bridge'\nimport EVT from 'evtjs';\nimport bip39 from 'bip39'\n\n\n// create EVTWallet\nwindow.createEVTWallet = async (password) => {\n  let body\n  try {\n    // random 16bytes as hex\n    let entropy = (await  EVT.EvtKey.random32BytesAsHex()).substring(32);\n\n    // uses HEX strings for entropy\n    let mnemoinc = bip39.entropyToMnemonic(entropy);\n\n    let seed = bip39.mnemonicToSeedHex(mnemoinc);\n    let privateKey = await EVT.EvtKey.seedPrivateKey(seed);\n    let publicKey = EVT.EvtKey.privateToPublic(privateKey);\n\n    body = {\n      mnemoinc: mnemoinc,\n      privateKey: privateKey,\n      publicKey: publicKey,\n      password: password,\n      type: 'EVT'\n    }\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('createEVTWalletCallback', body)\n}\n\n// import EVTWallet\nwindow.importEVTWallet = async (mnemoinc, password) => {\n\n  let body\n  try {\n    let seed = bip39.mnemonicToSeedHex(mnemoinc);\n    let privateKey = await EVT.EvtKey.seedPrivateKey(seed);\n    let publicKey = EVT.EvtKey.privateToPublic(privateKey)\n\n    body = {\n      mnemoinc: mnemoinc,\n      privateKey: privateKey,\n      publicKey: publicKey,\n      password: password,\n      type: 'EVT'\n    }\n  } catch (error) {\n    body = errorHandle(error)\n  }\n  bridge('importEVTWalletCallback', body)\n}\n\nwindow.getEVTFungiblesList = async(publicKeys)=>{\n  let body = []\n  try {\n    let arr = await window.apiCaller.getCreatedFungibles(publicKeys)\n    console.log(arr)\n    arr.ids.forEach(item => {\n      let detail = window.apiCaller.getFungibleSymbolDetail(item)\n      body.push(detail)\n    })\n    Promise.all(body).then((result)=>{\n      bridge('getEVTFungiblesListCallback', result)\n    }).catch((error)=>{\n      body = errorHandle(error)\n      bridge('getEVTFungiblesListCallback', body)\n    })\n  } catch (error) {\n    body = errorHandle(error)\n    bridge('getEVTFungiblesListCallback', body)\n  }\n}\n\n\nwindow.getEVTDomainsList = async(publicKeys)=>{\n  let body = []\n  try {\n    let arr = await window.apiCaller.getCreatedDomains(publicKeys)\n    arr.forEach(item => {\n      let detail = window.apiCaller.getDomainDetail(item.name)\n      body.push(detail)\n    })\n    Promise.all(body).then((result)=>{\n      bridge('getEVTDomainsListCallback', result)\n    }).catch((error)=>{\n      body = errorHandle(error)\n      bridge('getEVTDomainsListCallback', body)\n    })\n  } catch (error) {\n    body = errorHandle(error)\n    bridge('getEVTDomainsListCallback', body)\n  }\n}\n\n\nwindow.getEVTFungibleBalanceList = async(publicKeys,symbolId)=>{\n  let body = []\n  try {\n    let arr = await window.apiCaller.getFungibleBalance(publicKeys,symbolId)\n    arr.forEach(item => {\n      let detail = window.apiCaller.getFungibleSymbolDetail(Number(item.split('#')[1]))\n      body.push(detail)\n    })\n    Promise.all(body).then((result)=>{\n      arr.forEach((item,i)=>{\n        result[i].asset = item\n      })\n      bridge('getEVTFungibleBalanceListCallback', result)\n    }).catch((error)=>{\n      body = errorHandle(error)\n      bridge('getEVTFungibleBalanceListCallback', body)\n    })\n  } catch (error) {\n    body = errorHandle(error)\n    bridge('getEVTFungibleBalanceListCallback', body)\n  }\n}\n\n\n\n"],"sourceRoot":""}